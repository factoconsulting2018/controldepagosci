package com.checklist.app

import android.Manifest
import android.app.AlertDialog
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.content.SharedPreferences
import android.content.pm.PackageManager
import android.os.Build
import android.os.Bundle
import android.content.Context.RECEIVER_NOT_EXPORTED
import android.view.View
import android.widget.ArrayAdapter
import android.widget.EditText
import android.widget.Spinner
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import com.checklist.app.databinding.ActivityMainBinding
import kotlinx.coroutines.launch

class MainActivity : AppCompatActivity() {
    
    private lateinit var binding: ActivityMainBinding
    private lateinit var questionsAdapter: QuestionsAdapter
    private var isAdminMode = false
    private var isSuperAdminMode = false
    private lateinit var ejecutivoManager: EjecutivoManager
    private lateinit var questionManager: QuestionManager
    private lateinit var clienteManager: ClienteManager
    private lateinit var reportManager: ReportManager
    private lateinit var clienteEstadoManager: ClienteEstadoManager
    
    // BroadcastReceiver para escuchar cambios de configuraci√≥n
    private val configChangeReceiver = object : BroadcastReceiver() {
        override fun onReceive(context: Context?, intent: Intent?) {
            if (intent?.action == "com.checklist.app.CONFIG_CHANGED") {
                android.util.Log.d("MainActivity", "ConfigChangeReceiver: Recibido cambio de configuraci√≥n")
                refreshUIAfterConfigChange()
            }
        }
    }
    private lateinit var prefs: SharedPreferences
    private var currentEjecutivoFilter: Long? = null // Siempre null - sin filtro por defecto
    private var allQuestions: List<Question> = emptyList()
    private var searchQuery: String = ""
    
    companion object {
        private const val PERMISSION_REQUEST_CODE = 1001
    }
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        try {
            // Ocultar la ActionBar
            supportActionBar?.hide()
            
            binding = ActivityMainBinding.inflate(layoutInflater)
            setContentView(binding.root)
            
            prefs = getSharedPreferences("checklist_prefs", MODE_PRIVATE)
            ejecutivoManager = EjecutivoManager(this)
            questionManager = QuestionManager(this)
            clienteManager = ClienteManager(this)
            reportManager = ReportManager(this)
            clienteEstadoManager = ClienteEstadoManager(this)
            requestPermissions()
            setupNavigationBar()
            setupQuestionsRecyclerView()
            setupFooter()
            setupFloatingProgressIndicator()
            setupFloatingActionButton()
            setupSearchFunctionality()
            
            // Cargar datos esenciales primero (r√°pido)
            loadEssentialData()
            
            // Operaciones costosas en background (diferidas)
            lifecycleScope.launch {
                try {
                    // Cargar datos no cr√≠ticos en background
                    loadNonEssentialData()
                } catch (e: Exception) {
                    android.util.Log.e("MainActivity", "Error en onCreate background tasks", e)
                }
            }
            
            // Las opciones de configuraci√≥n ahora est√°n en el men√∫ "M√°s"
            
            // Verificar si se debe generar un reporte
            if (intent.getBooleanExtra("generateReport", false)) {
                generateReport()
            }
        } catch (e: Exception) {
            Toast.makeText(this, "Error al inicializar la aplicaci√≥n: ${e.message}", Toast.LENGTH_LONG).show()
            e.printStackTrace()
            // Registrar error en logs
            AppLogger.getInstance(this).logError("MainActivity", "Error al inicializar la aplicaci√≥n: ${e.message}", e)
        }
    }
    
    private fun setupNavigationBar() {
        // Configurar el Navigation Bar
        binding.navigationBar.setOnItemSelectedListener { item ->
            // Sin animaciones para mejor rendimiento
            when (item.itemId) {
                R.id.nav_questions -> {
                    showClientsActivity()
                    true
                }
                R.id.nav_ejecutivos -> {
                    val intent = Intent(this, EjecutivosActivity::class.java)
                    intent.putExtra("isAdminMode", isAdminMode)
                    intent.flags = Intent.FLAG_ACTIVITY_NO_ANIMATION
                    startActivity(intent)
                    true
                }
                R.id.nav_reports -> {
                    val intent = Intent(this, ReportsActivity::class.java)
                    intent.putExtra("isAdminMode", isAdminMode)
                    intent.flags = Intent.FLAG_ACTIVITY_NO_ANIMATION
                    startActivity(intent)
                    true
                }
                R.id.nav_more -> {
                    showMoreOptionsDialog()
                    true
                }
                else -> false
            }
        }
        
        // Sin animaciones para mejor rendimiento
        // Las opciones de admin ahora est√°n en el men√∫ "M√°s"
    }
    
    // M√©todos de animaci√≥n eliminados para mejorar el rendimiento
    
    private fun showMoreOptionsDialog() {
        val options = mutableListOf<String>()
        val icons = mutableListOf<Int>()
        val actions = mutableListOf<() -> Unit>()
        
        // Siempre mostrar configuraci√≥n
        options.add("‚öôÔ∏è Configuraci√≥n")
        icons.add(R.drawable.ic_settings)
        actions.add {
            val intent = Intent(this, ConfigActivity::class.java)
            intent.flags = Intent.FLAG_ACTIVITY_NO_ANIMATION
            startActivity(intent)
        }
        
        // Agregar notificaciones
        options.add("üîî Notificaciones")
        icons.add(R.drawable.ic_megaphone)
        actions.add {
            val intent = Intent(this, NotificationsActivity::class.java)
            intent.putExtra("isAdminMode", isAdminMode)
            intent.flags = Intent.FLAG_ACTIVITY_NO_ANIMATION
            startActivity(intent)
        }
        
        // Agregar promesas
        options.add("üìÖ Promesas de Pago")
        icons.add(R.drawable.ic_promise)
        actions.add {
            val intent = Intent(this, PromesasActivity::class.java)
            intent.putExtra("isAdminMode", isAdminMode)
            intent.flags = Intent.FLAG_ACTIVITY_NO_ANIMATION
            startActivity(intent)
        }
        
        // Agregar soporte
        options.add("üõ†Ô∏è Soporte")
        icons.add(R.drawable.ic_support)
        actions.add {
            val intent = Intent(this, SoporteActivity::class.java)
            intent.putExtra("isAdminMode", isAdminMode)
            intent.flags = Intent.FLAG_ACTIVITY_NO_ANIMATION
            startActivity(intent)
        }
        
        // Mostrar opciones de admin si est√° en modo admin
        if (isAdminMode) {
            options.add("üîì Cerrar Sesi√≥n Admin")
            icons.add(R.drawable.ic_admin)
            actions.add { showLogoutDialog() }
        } else {
            options.add("üîí Modo Admin")
            icons.add(R.drawable.ic_admin)
            actions.add { showAdminDialog() }
        }
        
        val builder = AlertDialog.Builder(this)
        builder.setTitle("M√°s opciones")
        builder.setItems(options.toTypedArray()) { _, which ->
            actions[which].invoke()
        }
        builder.show()
    }
    
    private fun showLogoutDialog() {
        val options = arrayOf("Cerrar Sesi√≥n", "Cambiar Contrase√±a")
        
        AlertDialog.Builder(this)
            .setTitle("Administrador")
            .setItems(options) { _, which ->
                when (which) {
                    0 -> {
                        // Cerrar sesi√≥n
                        logoutAdmin()
                    }
                    1 -> {
                        // Cambiar contrase√±a
                        showChangePasswordDialog()
                    }
                }
            }
            .setNegativeButton("Cancelar", null)
            .show()
    }
    
    private fun showChangePasswordDialog() {
        val input = EditText(this)
        input.hint = "Nueva contrase√±a"
        input.inputType = android.text.InputType.TYPE_CLASS_TEXT or android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD
        
        AlertDialog.Builder(this)
            .setTitle("Cambiar Contrase√±a")
            .setMessage("Ingrese la nueva contrase√±a de administrador:")
            .setView(input)
            .setPositiveButton("Guardar") { _, _ ->
                val newPassword = input.text.toString().trim()
                if (newPassword.isNotEmpty()) {
                    // Guardar nueva contrase√±a
                    prefs.edit().putString("admin_password", newPassword).apply()
                    Toast.makeText(this, "Contrase√±a actualizada correctamente", Toast.LENGTH_SHORT).show()
                } else {
                    Toast.makeText(this, "La contrase√±a no puede estar vac√≠a", Toast.LENGTH_SHORT).show()
                }
            }
            .setNegativeButton("Cancelar", null)
            .show()
    }
    
    
    private fun showAdminDialog() {
        // Siempre mostrar el di√°logo para autenticaci√≥n
        
        val editText = EditText(this).apply {
            hint = "Contrase√±a de administrador"
            inputType = android.text.InputType.TYPE_CLASS_TEXT or android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD
        }
        
        AlertDialog.Builder(this)
            .setTitle("Acceso de Administrador")
            .setMessage("Ingresa la contrase√±a para acceder al modo administrador")
            .setView(editText)
            .setPositiveButton("Ingresar") { _, _ ->
                val password = editText.text.toString()
                val savedPassword = prefs.getString("admin_password", "")
                
                if (password == "13601360") {
                    // Superadmin
                    isAdminMode = true
                    isSuperAdminMode = true
                    saveAdminSession(true, true)
                    updateAdminButtonText()
                    questionsAdapter.notifyDataSetChanged()
                    Toast.makeText(this, "Modo Super Administrador activado", Toast.LENGTH_SHORT).show()
                } else if (password == "morelia") {
                    // Precargar preguntas del checklist
                    isAdminMode = true
                    isSuperAdminMode = false
                    saveAdminSession(true, false)
                    updateAdminButtonText()
                    questionsAdapter.notifyDataSetChanged()
                    loadPredefinedQuestions()
                    Toast.makeText(this, "Modo Administrador activado - Preguntas precargadas", Toast.LENGTH_SHORT).show()
                } else if (password == savedPassword && savedPassword.isNotEmpty()) {
                    // Admin normal
                    isAdminMode = true
                    isSuperAdminMode = false
                    saveAdminSession(true, false)
                    updateAdminButtonText()
                    questionsAdapter.notifyDataSetChanged()
                    Toast.makeText(this, "Modo Administrador activado", Toast.LENGTH_SHORT).show()
                } else {
                    Toast.makeText(this, "Contrase√±a incorrecta", Toast.LENGTH_SHORT).show()
                }
            }
            .setNegativeButton("Cancelar", null)
            .show()
    }
    
    private fun showClientsActivity() {
        val intent = Intent(this, QuestionsActivity::class.java)
        intent.putExtra("isAdminMode", isAdminMode)
        intent.putExtra("openNewClientForm", true)
        intent.flags = Intent.FLAG_ACTIVITY_NO_ANIMATION
        startActivity(intent)
    }
    
    private fun initializeDefaultEjecutivos() {
        val ejecutivos = ejecutivoManager.getAllEjecutivos()
        if (ejecutivos.isEmpty()) {
            // Los ejecutivos por defecto se crean autom√°ticamente en EjecutivoManager
            // No necesitamos hacer nada aqu√≠
        }
    }
    
    private fun checkFirstTimeSetup() {
        val isFirstTime = prefs.getBoolean("first_time", true)
        if (isFirstTime) {
            // No mostrar configuraci√≥n inicial, solo marcar como no primera vez
            prefs.edit().putBoolean("first_time", false).apply()
        } else {
            // Verificar si hay una sesi√≥n activa guardada
            val hasActiveSession = prefs.getBoolean("admin_session_active", false)
            if (hasActiveSession) {
                isAdminMode = true
                isSuperAdminMode = prefs.getBoolean("super_admin_session_active", false)
                updateAdminButtonText()
            }
        }
    }
    
    private fun showFirstTimeAdminSetup() {
        val editText = EditText(this).apply {
            hint = "Nueva contrase√±a de administrador"
            inputType = android.text.InputType.TYPE_CLASS_TEXT or android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD
        }
        
        AlertDialog.Builder(this)
            .setTitle("Configuraci√≥n Inicial")
            .setMessage("Esta es la primera vez que usas la aplicaci√≥n. Por favor, establece una contrase√±a de administrador personalizada.")
            .setView(editText)
            .setPositiveButton("Guardar") { _, _ ->
                val password = editText.text.toString().trim()
                if (password.length >= 4) {
                    prefs.edit()
                        .putString("admin_password", password)
                        .putBoolean("first_time", false)
                        .apply()
                    Toast.makeText(this, "Contrase√±a de administrador guardada", Toast.LENGTH_SHORT).show()
                } else {
                    Toast.makeText(this, "La contrase√±a debe tener al menos 4 caracteres", Toast.LENGTH_SHORT).show()
                    showFirstTimeAdminSetup() // Mostrar nuevamente si la contrase√±a es muy corta
                }
            }
            .setCancelable(false)
            .show()
    }
    
    
    
    private fun logoutAdmin() {
        isAdminMode = false
        isSuperAdminMode = false
        clearAdminSession()
        updateAdminButtonText()
        // Actualizar el adapter para reflejar los cambios del modo admin
        questionsAdapter.notifyDataSetChanged()
        Toast.makeText(this, "Sesi√≥n cerrada", Toast.LENGTH_SHORT).show()
    }
    
    
    private fun setupQuestionsRecyclerView() {
        questionsAdapter = QuestionsAdapter(
            onEditClick = { question -> 
                if (isAdminMode) {
                    editCliente(question)
                } else {
                    Toast.makeText(this, "Modo administrador requerido para editar", Toast.LENGTH_SHORT).show()
                }
            },
            onDeleteClick = { question -> 
                if (isAdminMode) {
                    deleteCliente(question)
                } else {
                    Toast.makeText(this, "Modo administrador requerido para eliminar", Toast.LENGTH_SHORT).show()
                }
            },
            onQuestionClick = { question -> 
                // Mostrar detalles de la pregunta
                Toast.makeText(this, "Pregunta: ${question.title}", Toast.LENGTH_SHORT).show()
            },
            onStatusToggle = { question ->
                // Alternar estado de completado
                android.util.Log.d("MainActivity", "onStatusToggle: RECIBIDO - ID: ${question.id}, T√≠tulo: ${question.title}, Estado actual: ${question.isCompleted}")
                toggleQuestionCompletion(question)
            },
            isAdminMode = { isAdminMode }, // Usar el valor real de isAdminMode
            getEjecutivoName = { ejecutivoId -> getEjecutivoNameById(ejecutivoId) },
            getEjecutivoColor = { ejecutivoId -> getEjecutivoColorById(ejecutivoId) },
            getClienteInfo = { clienteId -> getClienteInfoById(clienteId) },
            getClientePhone = { clienteId -> getClientePhoneById(clienteId) }
        )
        binding.questionsRecyclerView.apply {
            layoutManager = LinearLayoutManager(this@MainActivity)
            adapter = questionsAdapter
        }
    }
    
    private fun setupSearchFunctionality() {
        val searchLayout = binding.searchLayout
        val searchEditText = binding.searchEditText
        
        // Configurar listener de b√∫squeda
        searchEditText.addTextChangedListener(object : android.text.TextWatcher {
            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
                searchQuery = s?.toString() ?: ""
                android.util.Log.d("MainActivity", "B√∫squeda: '$searchQuery'")
                updateQuestionsUI(allQuestions)
            }
            override fun afterTextChanged(s: android.text.Editable?) {}
        })
    }
    
    private fun setupEjecutivoButtons() {
        val ejecutivos = ejecutivoManager.getAllEjecutivos()
        
        android.util.Log.d("MainActivity", "setupEjecutivoButtons: ${ejecutivos.size} ejecutivos encontrados")
        ejecutivos.forEach { ejecutivo ->
            android.util.Log.d("MainActivity", "  Ejecutivo: ${ejecutivo.name}, Color: ${ejecutivo.color}")
        }
        
        // Crear botones din√°micamente para cada ejecutivo
        val layout = binding.ejecutivoFilterLayout
        layout.removeAllViews() // Limpiar botones existentes
        
        // Ocultar bot√≥n "TODOS" - no se necesita filtro por defecto
        binding.btnAllEjecutivos.visibility = android.view.View.GONE
        
        // Si no hay ejecutivos, mostrar mensaje
        if (ejecutivos.isEmpty()) {
            android.util.Log.w("MainActivity", "setupEjecutivoButtons: No hay ejecutivos disponibles")
            return
        }
        
        // Agregar botones para cada ejecutivo
        ejecutivos.forEach { ejecutivo ->
            val button = android.widget.Button(this).apply {
                id = View.generateViewId()
                text = ejecutivo.name
                textSize = 10f
                // Usar el color asignado al ejecutivo
                try {
                    val color = android.graphics.Color.parseColor(ejecutivo.color)
                    setBackgroundColor(color)
                    setTextColor(android.graphics.Color.WHITE)
                    android.util.Log.d("MainActivity", "Bot√≥n creado para ejecutivo '${ejecutivo.name}' con color ${ejecutivo.color}")
                } catch (e: Exception) {
                    // Si hay error con el color, usar color por defecto
                    setBackgroundColor(resources.getColor(com.checklist.app.R.color.gray_300, null))
                    setTextColor(resources.getColor(com.checklist.app.R.color.black, null))
                    android.util.Log.w("MainActivity", "Error al parsear color '${ejecutivo.color}' para ejecutivo '${ejecutivo.name}': ${e.message}")
                }
                layoutParams = android.widget.LinearLayout.LayoutParams(
                    android.widget.LinearLayout.LayoutParams.WRAP_CONTENT,
                    android.widget.LinearLayout.LayoutParams.WRAP_CONTENT
                ).apply {
                    setMargins(8, 0, 0, 0)
                }
                minWidth = 60
                setPadding(8, 8, 8, 8)

                setOnClickListener {
                    filterByEjecutivo(ejecutivo.id)
                }
            }
            layout.addView(button)
        }
        
        // Configurar bot√≥n de generar informe
        binding.generateReportButton.setOnClickListener {
            generateReport()
        }
        
        // Inicializar estado de botones
        updateEjecutivoButtonStates()
    }
    
    
    
    private fun filterByEjecutivo(ejecutivoId: Long?) {
        android.util.Log.d("MainActivity", "filterByEjecutivo: Filtro aplicado: $ejecutivoId")
        currentEjecutivoFilter = ejecutivoId
        updateEjecutivoButtonStates()
        // Solo actualizar la UI con los datos existentes, no recargar
        updateQuestionsUI(allQuestions)
    }
    
    private fun updateEjecutivoButtonStates() {
        val ejecutivos = ejecutivoManager.getAllEjecutivos()
        val layout = binding.ejecutivoFilterLayout
        
        // Bot√≥n "TODOS" oculto - no se necesita actualizar
        
        // Actualizar botones de ejecutivos
        for (i in 1 until layout.childCount) {
            val button = layout.getChildAt(i) as android.widget.Button
            val ejecutivo = ejecutivos[i - 1]
            val isSelected = currentEjecutivoFilter == ejecutivo.id
            
            if (isSelected) {
                // Cuando est√° seleccionado, usar color m√°s oscuro
                try {
                    val color = android.graphics.Color.parseColor(ejecutivo.color)
                    val darkerColor = android.graphics.Color.argb(
                        255,
                        (android.graphics.Color.red(color) * 0.7).toInt(),
                        (android.graphics.Color.green(color) * 0.7).toInt(),
                        (android.graphics.Color.blue(color) * 0.7).toInt()
                    )
                    button.setBackgroundColor(darkerColor)
                    button.setTextColor(android.graphics.Color.WHITE)
                } catch (e: Exception) {
                    button.setBackgroundColor(resources.getColor(com.checklist.app.R.color.green_500, null))
                    button.setTextColor(resources.getColor(com.checklist.app.R.color.white, null))
                }
            } else {
                // Cuando no est√° seleccionado, usar el color original del ejecutivo
                try {
                    val color = android.graphics.Color.parseColor(ejecutivo.color)
                    button.setBackgroundColor(color)
                    button.setTextColor(android.graphics.Color.WHITE)
                } catch (e: Exception) {
                    button.setBackgroundColor(resources.getColor(com.checklist.app.R.color.gray_300, null))
                    button.setTextColor(resources.getColor(com.checklist.app.R.color.black, null))
                }
            }
        }
    }
    
    
    private fun getEjecutivoNameById(ejecutivoId: Long): String {
        val ejecutivo = ejecutivoManager.getAllEjecutivos().find { it.id == ejecutivoId }
        return ejecutivo?.name ?: "Ejecutivo desconocido"
    }
    
    private fun getEjecutivoColorById(ejecutivoId: Long): String {
        val ejecutivo = ejecutivoManager.getAllEjecutivos().find { it.id == ejecutivoId }
        return ejecutivo?.color ?: "#FF6200EE" // Color por defecto p√∫rpura
    }
    
    private fun getClienteInfoById(clienteId: Long?): String {
        if (clienteId == null) return ""
        if (!::clienteManager.isInitialized) return ""
        val cliente = clienteManager.getClienteById(clienteId)
        return if (cliente != null) {
            "${cliente.nombre} - ${cliente.cedula}"
        } else {
            ""
        }
    }
    
    private fun getClientePhoneById(clienteId: Long?): String {
        if (clienteId == null) return ""
        if (!::clienteManager.isInitialized) return ""
        val cliente = clienteManager.getClienteById(clienteId)
        val telefono = if (cliente != null) {
            cliente.telefono
        } else {
            ""
        }
        android.util.Log.d("MainActivity", "getClientePhoneById: Cliente ID=$clienteId, Tel√©fono='$telefono'")
        return telefono
    }
    
    private fun getRandomColorForEjecutivo(): String {
        val colors = listOf(
            "#FF2196F3", // Azul
            "#FF4CAF50", // Verde
            "#FFFF9800", // Naranja
            "#FF9C27B0", // P√∫rpura
            "#FFE91E63", // Rosa
            "#FF00BCD4", // Cian
            "#FF795548", // Marr√≥n
            "#FF607D8B", // Azul gris
            "#FF3F51B5", // √çndigo
            "#FF8BC34A"  // Verde claro
        )
        return colors.random()
    }
    
    private fun ensureAllClientsHaveQuestions() {
        if (!::clienteManager.isInitialized) return
        val t0 = System.currentTimeMillis()
        val allClientes = clienteManager.getAllClientes()
        val existingQuestions = questionManager.getQuestionsOrderedByPosition()
        val existingClienteIds = existingQuestions.mapNotNull { it.clienteId }.toSet()
        
        // Si no hay clientes nuevos, no hacer nada
        if (allClientes.all { it.id in existingClienteIds }) {
            android.util.Log.d("Perf", "ensureAllClientsHaveQuestions: 0ms (no new clients)")
            return
        }
        
        // Obtener ejecutivos disponibles
        val ejecutivos = ejecutivoManager.getAllEjecutivos()
        val defaultEjecutivoId = 0L
        var nextPosition = questionManager.getNextPosition()
        
        // Crear ejecutivos √∫nicos basados en los clientes (solo los necesarios)
        val ejecutivosUnicos = allClientes
            .map { it.ejecutivo }
            .filter { it.isNotBlank() }
            .distinct()
        
        // Crear ejecutivos autom√°ticamente para cada nombre √∫nico (en lote)
        val ejecutivosNuevos = mutableListOf<Ejecutivo>()
        ejecutivosUnicos.forEach { nombreEjecutivo ->
            val ejecutivoExistente = ejecutivos.find { it.name.equals(nombreEjecutivo, ignoreCase = true) }
            if (ejecutivoExistente == null) {
                val nuevoEjecutivo = Ejecutivo(
                    name = nombreEjecutivo,
                    color = getRandomColorForEjecutivo()
                )
                ejecutivosNuevos.add(nuevoEjecutivo)
            }
        }
        
        // Agregar todos los ejecutivos nuevos de una vez
        ejecutivosNuevos.forEach { ejecutivoManager.addEjecutivo(it) }
        
        // Actualizar la lista de ejecutivos despu√©s de crear los nuevos
        val ejecutivosActualizados = ejecutivoManager.getAllEjecutivos()
        
        // Crear preguntas para clientes que no tienen una entrada (en lote)
        val isInitialStatePendiente = prefs.getBoolean("client_initial_state_pendiente", true)
        val initialCompleted = !isInitialStatePendiente
        val estadoInicial = if (isInitialStatePendiente) {
            ClienteEstadoManager.ESTADO_PENDIENTE
        } else {
            ClienteEstadoManager.ESTADO_PAGADO
        }
        val questionsToAdd = mutableListOf<Question>()
        
        for (cliente in allClientes) {
            if (cliente.id !in existingClienteIds) {
                val ejecutivoCorrecto = ejecutivosActualizados.find { it.name.equals(cliente.ejecutivo, ignoreCase = true) }
                val ejecutivoId = ejecutivoCorrecto?.id ?: defaultEjecutivoId
                
                val question = Question(
                    title = cliente.nombre,
                    subtitle = cliente.cedula,
                    ejecutivoId = ejecutivoId,
                    position = nextPosition++,
                    clienteId = cliente.id,
                    isCompleted = initialCompleted
                )
                questionsToAdd.add(question)
                
                // Inicializar estado en la tabla de estados
                clienteEstadoManager.updateEstadoCliente(cliente.id, estadoInicial, ejecutivoId)
            }
        }
        
        // Agregar todas las preguntas de una vez
        questionsToAdd.forEach { questionManager.addQuestion(it) }
        
        if (questionsToAdd.isNotEmpty()) {
            android.util.Log.d("MainActivity", "ensureAllClientsHaveQuestions: ${questionsToAdd.size} clientes inicializados con estado: $estadoInicial")
        }
        android.util.Log.d("Perf", "ensureAllClientsHaveQuestions total: ${System.currentTimeMillis() - t0}ms (created=${questionsToAdd.size})")
    }
    
    private fun precargarClientes() {
        lifecycleScope.launch {
            try {
                val success = clienteManager.precargarClientes()
                if (success) {
                    val clientesCount = clienteManager.getAllClientes().size
                    android.util.Log.d("MainActivity", "precargarClientes: $clientesCount clientes cargados autom√°ticamente")
                    // No mostrar Toast, carga silenciosa
                } else {
                    android.util.Log.d("MainActivity", "precargarClientes: No se encontraron archivos de clientes")
                }
            } catch (e: Exception) {
                android.util.Log.e("MainActivity", "precargarClientes: Error al cargar clientes", e)
            }
        }
    }
    
    private fun loadQuestions() {
        // Solo cargar si no hay datos o si es la primera vez
        if (allQuestions.isNotEmpty()) {
            android.util.Log.d("MainActivity", "loadQuestions: Ya hay datos cargados, omitiendo recarga")
            // A√∫n as√≠, actualizar la UI con los datos existentes
            updateQuestionsUI(allQuestions)
            return
        }
        
        // Mostrar indicador de carga
        runOnUiThread {
            binding.progressBarLayout.visibility = View.VISIBLE
            binding.progressText.text = "Cargando datos..."
        }
        
        // Ejecutar operaciones costosas en background, pero solo si faltan preguntas
        lifecycleScope.launch {
            try {
                val t0 = System.currentTimeMillis()
                // Solo sincronizar clientes->preguntas si faltan entradas
                val existingQuestions = questionManager.getQuestionsOrderedByPosition()
                val existingClienteIds = existingQuestions.mapNotNull { it.clienteId }.toSet()
                val allClientes = clienteManager.getAllClientes()
                val needSync = allClientes.any { it.id !in existingClienteIds }
                if (needSync) {
                    val tSync0 = System.currentTimeMillis()
                    ensureAllClientsHaveQuestions()
                    android.util.Log.d("Perf", "ensureAllClientsHaveQuestions: ${System.currentTimeMillis() - tSync0}ms")
                }

                val questions = questionManager.getQuestionsOrderedByPosition()
                allQuestions = questions
                
                // Limpiar clientes duplicados (solo si es necesario y en background)
                if (allClientes.size > 300) {
                    clienteManager.cleanDuplicateClientes()
                }
                
                // Asegurar que existe el ejecutivo "Todos" (ID 0)
                val ejecutivos = ejecutivoManager.getAllEjecutivos()
                if (ejecutivos.none { it.id == 0L }) {
                    val todosEjecutivo = Ejecutivo(
                        id = 0,
                        name = "Todos",
                        color = "#FF9E9E9E" // Gris
                    )
                    ejecutivoManager.addEjecutivo(todosEjecutivo)
                }
                
                // Actualizar UI en el hilo principal
                runOnUiThread {
                    binding.progressBarLayout.visibility = View.GONE
                    updateQuestionsUI(questions)
                    // Configurar botones de ejecutivo despu√©s de cargar datos
                    setupEjecutivoButtons()
                }
                android.util.Log.d("Perf", "loadQuestions total: ${System.currentTimeMillis() - t0}ms (questions=${questions.size})")
            } catch (e: Exception) {
                android.util.Log.e("MainActivity", "Error en loadQuestions", e)
                runOnUiThread {
                    binding.progressBarLayout.visibility = View.GONE
                    Toast.makeText(this@MainActivity, "Error al cargar datos", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }
    
    private fun refreshQuestionsList() {
        android.util.Log.d("MainActivity", "refreshQuestionsList: Forzando recarga de la lista")
        // Limpiar cache y recargar
        allQuestions = emptyList()
        loadQuestions()
    }
    
    private fun updateQuestionsUI(questions: List<Question>) {
        val t0 = System.currentTimeMillis()
        // Aplicar filtros
        var filteredQuestions = questions
        
        // Aplicar filtro por ejecutivo si est√° activo
        if (currentEjecutivoFilter != null) {
            android.util.Log.d("MainActivity", "updateQuestionsUI: Aplicando filtro por ejecutivo: $currentEjecutivoFilter")
            filteredQuestions = filteredQuestions.filter { question ->
                val matches = question.ejecutivoId == currentEjecutivoFilter
                android.util.Log.d("MainActivity", "updateQuestionsUI: Pregunta ${question.title} - Ejecutivo: ${question.ejecutivoId} - Coincide: $matches")
                matches
            }
            android.util.Log.d("MainActivity", "updateQuestionsUI: Filtro por ejecutivo aplicado: ${filteredQuestions.size} preguntas")
        }
        
        // Aplicar filtro de b√∫squeda si hay texto
        if (searchQuery.isNotEmpty()) {
            android.util.Log.d("MainActivity", "updateQuestionsUI: Aplicando filtro de b√∫squeda: '$searchQuery'")
            filteredQuestions = filteredQuestions.filter { question ->
                val cliente = clienteManager.getClienteById(question.clienteId ?: -1)
                val matches = if (cliente != null) {
                    cliente.nombre.contains(searchQuery, ignoreCase = true) || 
                    cliente.cedula.contains(searchQuery, ignoreCase = true)
                } else {
                    question.title.contains(searchQuery, ignoreCase = true) || 
                    question.subtitle.contains(searchQuery, ignoreCase = true)
                }
                android.util.Log.d("MainActivity", "updateQuestionsUI: Pregunta ${question.title} - Coincide b√∫squeda: $matches")
                matches
            }
            android.util.Log.d("MainActivity", "updateQuestionsUI: Filtro de b√∫squeda aplicado: ${filteredQuestions.size} preguntas")
        }
        
        
        // Ordenar alfab√©ticamente por ejecutivo y luego por nombre del cliente (A-Z)
        filteredQuestions = filteredQuestions.sortedWith(compareBy<Question> { question ->
            // Primero ordenar por ejecutivo
            val ejecutivo = ejecutivoManager.getEjecutivoById(question.ejecutivoId)
            ejecutivo?.name ?: "Sin ejecutivo"
        }.thenBy { question ->
            // Luego ordenar por nombre del cliente dentro de cada ejecutivo
            val cliente = clienteManager.getClienteById(question.clienteId ?: -1)
            if (cliente != null) {
                cliente.nombre.trim().uppercase()
            } else {
                question.title.trim().uppercase()
            }
        })
        
        android.util.Log.d("MainActivity", "loadQuestions: Ordenamiento por ejecutivo y alfab√©tico aplicado: ${filteredQuestions.size} preguntas")
        
        questionsAdapter.submitList(filteredQuestions)
        
        // Auto-seleccionar el primer cliente si hay preguntas disponibles
        if (filteredQuestions.isNotEmpty()) {
            val firstQuestion = filteredQuestions.first()
            android.util.Log.d("MainActivity", "Auto-seleccionando primer cliente: ${firstQuestion.title}")
            // Auto-activar el primer cliente (marcar como completado si est√° pendiente)
            if (!firstQuestion.isCompleted) {
                toggleQuestionCompletion(firstQuestion)
            }
        }
        
        // Mostrar/ocultar t√≠tulo seg√∫n si hay preguntas
        binding.titleText.visibility = if (filteredQuestions.isNotEmpty()) android.view.View.VISIBLE else android.view.View.GONE
        
        // Actualizar indicador de proceso
        updateProgressIndicator(filteredQuestions)
        val elapsed = System.currentTimeMillis() - t0
        android.util.Log.d("Perf", "updateQuestionsUI: ${elapsed}ms (in=${questions.size}, out=${filteredQuestions.size})")
    }
    
    
    private fun updateProgressIndicator(questions: List<Question>) {
        val completedCount = questions.count { it.isCompleted }
        val totalCount = questions.size
        
        if (totalCount == 0) {
            // Si no hay preguntas, mostrar mensaje por defecto
            binding.progressText.text = "Progreso: 0/0 (0%)"
            return
        }
        
        // Actualizar el texto del progreso en formato "Progreso: X/Y (Z%)"
        val progressPercentage = if (totalCount > 0) (completedCount * 100) / totalCount else 0
        binding.progressText.text = "Progreso: $completedCount/$totalCount ($progressPercentage%)"
    }
    
    private fun toggleQuestionCompletion(question: Question) {
        android.util.Log.d("MainActivity", "toggleQuestionCompletion: INICIANDO - ID: ${question.id}, Estado actual: ${question.isCompleted}")
        
        val clienteId = question.clienteId ?: 0L
        val nuevoEstado = if (question.isCompleted) ClienteEstadoManager.ESTADO_PENDIENTE else ClienteEstadoManager.ESTADO_PAGADO
        val ejecutivoId = question.ejecutivoId
        
        // Actualizar estado en la nueva tabla de estados
        clienteEstadoManager.updateEstadoCliente(clienteId, nuevoEstado, ejecutivoId)
        
        // Actualizar tambi√©n la pregunta para mantener compatibilidad
        val updatedQuestion = question.copy(isCompleted = !question.isCompleted)
        questionManager.updateQuestion(updatedQuestion)
        android.util.Log.d("MainActivity", "toggleQuestionCompletion: Estado actualizado en tabla de estados: $nuevoEstado")
        
        // Actualizar la lista local allQuestions
        val updatedQuestions = allQuestions.map { 
            if (it.id == question.id) updatedQuestion else it 
        }
        allQuestions = updatedQuestions
        
        // Forzar actualizaci√≥n completa del adapter
        android.util.Log.d("MainActivity", "toggleQuestionCompletion: Forzando actualizaci√≥n completa del adapter")
        questionsAdapter.submitList(updatedQuestions.toList())
        
        // Actualizar indicador de progreso
        updateProgressIndicator(updatedQuestions)
        
        // Determinar el mensaje correcto seg√∫n el estado final
        val status = if (updatedQuestion.isCompleted) "Pagado" else "Pendiente"
        val mensaje = if (updatedQuestion.isCompleted) {
            "Cliente se ha marcado como pagado"
        } else {
            "Cliente se ha marcado como pendiente"
        }
        Toast.makeText(this, mensaje, Toast.LENGTH_SHORT).show()
        android.util.Log.d("MainActivity", "toggleQuestionCompletion: COMPLETADO - Estado final: $status")
    }
    
    private fun editCliente(question: Question) {
        val clienteId = question.clienteId
        android.util.Log.d("MainActivity", "editCliente: question.clienteId = $clienteId")
        android.util.Log.d("MainActivity", "editCliente: question completa = $question")
        if (clienteId == null) {
            Toast.makeText(this, "No se puede editar: Cliente no encontrado", Toast.LENGTH_SHORT).show()
            return
        }
        
        var cliente = clienteManager.getClienteById(clienteId)
        android.util.Log.d("MainActivity", "editCliente: cliente encontrado = $cliente")
        if (cliente == null) {
            // Intentar refrescar el cache y buscar nuevamente
            android.util.Log.d("MainActivity", "editCliente: Cliente no encontrado, refrescando cache...")
            val allClientes = clienteManager.getAllClientes()
            android.util.Log.d("MainActivity", "editCliente: Total clientes en cache = ${allClientes.size}")
            cliente = allClientes.find { it.id == clienteId }
            if (cliente == null) {
                Toast.makeText(this, "Cliente no encontrado", Toast.LENGTH_SHORT).show()
                return
            }
        }
        
        // Crear di√°logo de edici√≥n
        val dialogView = layoutInflater.inflate(R.layout.dialog_add_question, null)
        
        // Obtener referencias a los campos
        val nombreEditText = dialogView.findViewById<EditText>(R.id.nombreClienteEditText)
        val cedulaEditText = dialogView.findViewById<EditText>(R.id.cedulaEditText)
        val tipoPersonaSpinner = dialogView.findViewById<Spinner>(R.id.tipoPersonaSpinner)
        val representanteEditText = dialogView.findViewById<EditText>(R.id.representanteEditText)
        val telefonoEditText = dialogView.findViewById<EditText>(R.id.telefonoEditText)
        val ciFcSpinner = dialogView.findViewById<Spinner>(R.id.ciFcSpinner)
        val ejecutivoSpinner = dialogView.findViewById<Spinner>(R.id.ejecutivoSpinner)
        val tipoRegimenSpinner = dialogView.findViewById<Spinner>(R.id.tipoRegimenSpinner)
        val patentadoCheckBox = dialogView.findViewById<android.widget.CheckBox>(R.id.patentadoCheckBox)
        val pendientePagoCheckBox = dialogView.findViewById<android.widget.CheckBox>(R.id.pendientePagoCheckBox)
        
        // Configurar spinner de tipo de persona
        val tiposPersona = arrayOf("F√≠sico", "Jur√≠dico")
        val tipoPersonaAdapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, tiposPersona)
        tipoPersonaAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        tipoPersonaSpinner.adapter = tipoPersonaAdapter
        
        // Configurar spinner de CI-FC
        val tiposCiFc = arrayOf("Sin especificar", "CI", "FC")
        val ciFcAdapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, tiposCiFc)
        ciFcAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        ciFcSpinner.adapter = ciFcAdapter
        
        // Configurar spinner de ejecutivos
        val ejecutivos = ejecutivoManager.getAllEjecutivos()
        val ejecutivosNombres = ejecutivos.map { it.name }.toMutableList()
        // Agregar opci√≥n vac√≠a al inicio
        ejecutivosNombres.add(0, "Sin ejecutivo")
        val ejecutivoAdapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, ejecutivosNombres)
        ejecutivoAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        ejecutivoSpinner.adapter = ejecutivoAdapter
        
        // Configurar spinner de tipo de r√©gimen
        val tiposRegimen = arrayOf("Sin r√©gimen", "Simplificado", "Tradicional")
        val tipoRegimenAdapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, tiposRegimen)
        tipoRegimenAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        tipoRegimenSpinner.adapter = tipoRegimenAdapter
        
        // Prellenar con datos actuales
        nombreEditText.setText(cliente.nombre)
        cedulaEditText.setText(cliente.cedula)
        
        // Seleccionar tipo de persona actual
        val tipoPersonaIndex = tiposPersona.indexOf(cliente.tipoPersona)
        if (tipoPersonaIndex >= 0) {
            tipoPersonaSpinner.setSelection(tipoPersonaIndex)
        }
        
        representanteEditText.setText(cliente.representante)
        telefonoEditText.setText(cliente.telefono)
        
        // Seleccionar CI-FC actual
        val ciFcIndex = tiposCiFc.indexOf(cliente.ciFc)
        if (ciFcIndex >= 0) {
            ciFcSpinner.setSelection(ciFcIndex)
        } else {
            ciFcSpinner.setSelection(0) // Seleccionar "Sin especificar" si no se encuentra
        }
        
        // Seleccionar ejecutivo actual
        val ejecutivoIndex = ejecutivosNombres.indexOf(cliente.ejecutivo)
        if (ejecutivoIndex >= 0) {
            ejecutivoSpinner.setSelection(ejecutivoIndex)
        } else {
            ejecutivoSpinner.setSelection(0) // Seleccionar "Sin ejecutivo" si no se encuentra
        }
        
        // Seleccionar tipo de r√©gimen actual
        val tipoRegimenIndex = tiposRegimen.indexOf(cliente.tipoRegimen)
        if (tipoRegimenIndex >= 0) {
            tipoRegimenSpinner.setSelection(tipoRegimenIndex)
        } else {
            tipoRegimenSpinner.setSelection(0) // Seleccionar "Sin r√©gimen" si no se encuentra
        }
        
        patentadoCheckBox.isChecked = cliente.patentado
        pendientePagoCheckBox.isChecked = cliente.pendientePago
        
        AlertDialog.Builder(this)
            .setTitle("Editar Cliente")
            .setView(dialogView)
            .setPositiveButton("Guardar") { _, _ ->
                val nuevoNombre = nombreEditText.text.toString().trim()
                val nuevaCedula = cedulaEditText.text.toString().trim()
                val nuevoTipoPersona = tipoPersonaSpinner.selectedItem.toString()
                val nuevoRepresentante = representanteEditText.text.toString().trim()
                val nuevoTelefono = telefonoEditText.text.toString().trim()
                val nuevoCiFcSeleccionado = ciFcSpinner.selectedItem.toString()
                val nuevoCiFc = if (nuevoCiFcSeleccionado == "Sin especificar") "" else nuevoCiFcSeleccionado
                val nuevoEjecutivoSeleccionado = ejecutivoSpinner.selectedItem.toString()
                val nuevoEjecutivo = if (nuevoEjecutivoSeleccionado == "Sin ejecutivo") "" else nuevoEjecutivoSeleccionado
                val nuevoTipoRegimenSeleccionado = tipoRegimenSpinner.selectedItem.toString()
                val nuevoTipoRegimen = if (nuevoTipoRegimenSeleccionado == "Sin r√©gimen") "" else nuevoTipoRegimenSeleccionado
                val nuevoPatentado = patentadoCheckBox.isChecked
                val nuevoPendientePago = pendientePagoCheckBox.isChecked
                
                if (nuevoNombre.isEmpty() || nuevaCedula.isEmpty()) {
                    Toast.makeText(this, "Nombre y c√©dula son obligatorios", Toast.LENGTH_SHORT).show()
                    return@setPositiveButton
                }
                
                // Actualizar cliente con todos los campos
                val clienteActualizado = cliente.copy(
                    nombre = nuevoNombre,
                    cedula = nuevaCedula,
                    tipoPersona = nuevoTipoPersona,
                    representante = nuevoRepresentante,
                    telefono = nuevoTelefono,
                    ciFc = nuevoCiFc,
                    ejecutivo = nuevoEjecutivo,
                    tipoRegimen = nuevoTipoRegimen,
                    patentado = nuevoPatentado,
                    pendientePago = nuevoPendientePago
                )
                clienteManager.updateCliente(clienteActualizado)
                
                // Actualizar pregunta asociada
                val ejecutivos = ejecutivoManager.getAllEjecutivos()
                val ejecutivoSeleccionado = ejecutivos.find { it.name.equals(nuevoEjecutivo, ignoreCase = true) }
                val updatedQuestion = question.copy(
                    title = nuevoNombre,
                    subtitle = nuevaCedula,
                    ejecutivoId = ejecutivoSeleccionado?.id ?: question.ejecutivoId
                )
                questionManager.updateQuestion(updatedQuestion)
                
                Toast.makeText(this, "Cliente actualizado exitosamente", Toast.LENGTH_SHORT).show()
                // Forzar recarga despu√©s de editar
                refreshQuestionsList()
            }
            .setNegativeButton("Cancelar", null)
            .show()
    }
    
    private fun deleteCliente(question: Question) {
        val clienteId = question.clienteId
        android.util.Log.d("MainActivity", "deleteCliente: question.clienteId = $clienteId")
        android.util.Log.d("MainActivity", "deleteCliente: question completa = $question")
        if (clienteId == null) {
            Toast.makeText(this, "No se puede eliminar: Cliente no encontrado", Toast.LENGTH_SHORT).show()
            return
        }
        
        var cliente = clienteManager.getClienteById(clienteId)
        android.util.Log.d("MainActivity", "deleteCliente: cliente encontrado = $cliente")
        if (cliente == null) {
            // Intentar refrescar el cache y buscar nuevamente
            android.util.Log.d("MainActivity", "deleteCliente: Cliente no encontrado, refrescando cache...")
            val allClientes = clienteManager.getAllClientes()
            android.util.Log.d("MainActivity", "deleteCliente: Total clientes en cache = ${allClientes.size}")
            cliente = allClientes.find { it.id == clienteId }
            if (cliente == null) {
                Toast.makeText(this, "Cliente no encontrado", Toast.LENGTH_SHORT).show()
                return
            }
        }
        
        AlertDialog.Builder(this)
            .setTitle("Eliminar Cliente")
            .setMessage("¬øEst√° seguro de que desea eliminar al cliente ${cliente.nombre}?\n\nEsta acci√≥n no se puede deshacer.")
            .setPositiveButton("Eliminar") { _, _ ->
                // Eliminar cliente
                clienteManager.deleteCliente(cliente)
                
                // Eliminar pregunta asociada
                questionManager.deleteQuestion(question)
                
                // Eliminar estado del cliente
                clienteEstadoManager.deleteEstadoByClienteId(clienteId)
                
                Toast.makeText(this, "Cliente eliminado exitosamente", Toast.LENGTH_SHORT).show()
                // Forzar recarga despu√©s de eliminar
                refreshQuestionsList()
            }
            .setNegativeButton("Cancelar", null)
            .setIcon(android.R.drawable.ic_dialog_alert)
            .show()
    }
    
    private fun generateReport() {
        val questions = questionManager.getQuestionsOrderedByPosition()
        val ejecutivos = ejecutivoManager.getAllEjecutivos()
        
        if (questions.isEmpty()) {
            Toast.makeText(this, "No hay preguntas para generar el reporte", Toast.LENGTH_SHORT).show()
            return
        }
        
        showReportFormDialog(questions, ejecutivos)
    }
    
    private fun showReportFormDialog(questions: List<Question>, ejecutivos: List<Ejecutivo>) {
        val dialogView = layoutInflater.inflate(R.layout.dialog_report_form, null)
        val executiveSpinner = dialogView.findViewById<Spinner>(R.id.executiveSpinner)
        val commentsEditText = dialogView.findViewById<EditText>(R.id.commentsEditText)

        // Poblar spinner de ejecutivos (nombres)
        val ejecutivoNames = ejecutivos.map { it.name }
        val spinnerAdapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, ejecutivoNames)
        spinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        executiveSpinner.adapter = spinnerAdapter
        
        AlertDialog.Builder(this)
            .setTitle("Generar Reporte")
            .setView(dialogView)
            .setPositiveButton("Generar Reporte") { _, _ ->
                val selectedEjecutivo = executiveSpinner.selectedItem?.toString()?.trim() ?: ""
                val comments = commentsEditText.text.toString().trim()

                if (selectedEjecutivo.isEmpty()) {
                    Toast.makeText(this, "Selecciona un ejecutivo", Toast.LENGTH_SHORT).show()
                    return@setPositiveButton
                }

                val reportInfo = ReportInfo(
                    ejecutivo = selectedEjecutivo,
                    comments = comments
                )

                generateReportWithInfo(questions, ejecutivos, reportInfo)
            }
            .setNegativeButton("Cancelar", null)
            .show()
    }
    
    
    private fun generateReportWithInfo(questions: List<Question>, ejecutivos: List<Ejecutivo>, reportInfo: ReportInfo) {
        try {
            // SIEMPRE obtener las preguntas m√°s recientes de la base de datos
            // para asegurar que reflejen los cambios de configuraci√≥n
            val currentQuestions = questionManager.getQuestionsOrderedByPosition()
            android.util.Log.d("MainActivity", "generateReportWithInfo: Obteniendo preguntas frescas de BD (${currentQuestions.size} preguntas)")
            
            // Actualizar allQuestions con los datos frescos
            allQuestions = currentQuestions
            
            val updatedEjecutivos = ejecutivoManager.getAllEjecutivos()
            
            // Obtener estados desde la nueva tabla de estados
            val estados = clienteEstadoManager.getAllEstados()
            android.util.Log.d("MainActivity", "generateReportWithInfo: Estados desde tabla - ${estados.size} registros")
            
            // Log para verificar estados antes de generar PDF
            val pendingCount = currentQuestions.count { question ->
                val clienteId = question.clienteId ?: 0L
                clienteEstadoManager.isClientePendiente(clienteId)
            }
            val paidCount = currentQuestions.count { question ->
                val clienteId = question.clienteId ?: 0L
                clienteEstadoManager.isClientePagado(clienteId)
            }
            android.util.Log.d("MainActivity", "generateReportWithInfo: Estados desde tabla - Pendientes: $pendingCount, Pagados: $paidCount")
            
            // Log detallado de cada pregunta para debugging
            currentQuestions.forEach { question ->
                val clienteId = question.clienteId ?: 0L
                val estado = clienteEstadoManager.getEstadoString(clienteId)
                android.util.Log.d("MainActivity", "generateReportWithInfo: Pregunta ${question.title} - isCompleted: ${question.isCompleted}, Estado tabla: $estado")
            }
            
            // Generar PDF con informaci√≥n del formulario
            val pdfGenerator = PdfGenerator(this)
            val checklistTitle = prefs.getString("checklist_title", "")
            val filePath = pdfGenerator.generateQuestionsReportWithEstados(currentQuestions, updatedEjecutivos, reportInfo, checklistTitle, clienteEstadoManager)
            
            if (filePath != null) {
                // Guardar informaci√≥n del reporte con la ruta del archivo
                val reportWithPath = reportInfo.copy(filePath = filePath)
                val reportId = reportManager.saveReport(reportWithPath)
                
                Toast.makeText(this, "Reporte generado exitosamente", Toast.LENGTH_SHORT).show()
                
                // Mostrar opci√≥n para abrir el reporte
                showOpenReportDialog(filePath, reportId)
            } else {
                Toast.makeText(this, "Error al generar el reporte", Toast.LENGTH_SHORT).show()
            }
        } catch (e: Exception) {
            Toast.makeText(this, "Error al generar el reporte: ${e.message}", Toast.LENGTH_LONG).show()
            e.printStackTrace()
            AppLogger.getInstance(this).logError("MainActivity", "Error al generar el reporte: ${e.message}", e)
        }
    }
    
    private fun showOpenReportDialog(filePath: String, reportId: Long) {
        AlertDialog.Builder(this)
            .setTitle("Reporte Generado")
            .setMessage("¬øDeseas abrir el reporte PDF ahora?")
            .setPositiveButton("Abrir PDF") { _, _ ->
                openPdfFile(filePath)
            }
            .setNegativeButton("M√°s tarde", null)
            .show()
    }
    
    private fun openPdfFile(filePath: String) {
        try {
            val file = java.io.File(filePath)
            val uri = androidx.core.content.FileProvider.getUriForFile(
                this,
                "${packageName}.fileprovider",
                file
            )
            
            val intent = android.content.Intent(android.content.Intent.ACTION_VIEW)
            intent.setDataAndType(uri, "application/pdf")
            intent.flags = android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION
            
            startActivity(intent)
        } catch (e: Exception) {
            Toast.makeText(this, "No se pudo abrir el PDF. Instala una aplicaci√≥n para ver PDFs.", Toast.LENGTH_LONG).show()
        }
    }
    
    
    private fun requestPermissions() {
        try {
            val permissions = mutableListOf<String>()
            
            // Solo solicitar permisos esenciales
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.VIBRATE) 
                != PackageManager.PERMISSION_GRANTED) {
                permissions.add(Manifest.permission.VIBRATE)
            }
            
            if (permissions.isNotEmpty()) {
                ActivityCompat.requestPermissions(
                    this,
                    permissions.toTypedArray(),
                    PERMISSION_REQUEST_CODE
                )
            }
        } catch (e: Exception) {
            // Si hay error con permisos, continuar sin ellos
            Toast.makeText(this, "Error al solicitar permisos: ${e.message}", Toast.LENGTH_SHORT).show()
        }
    }
    
    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)

        when (requestCode) {
            PERMISSION_REQUEST_CODE -> {
                val allPermissionsGranted = grantResults.all { it == PackageManager.PERMISSION_GRANTED }
                if (!allPermissionsGranted) {
                    Toast.makeText(
                        this,
                        "Algunos permisos fueron denegados. La aplicaci√≥n puede no funcionar correctamente.",
                        Toast.LENGTH_LONG
                    ).show()
                }
            }
        }
    }
    
    override fun onResume() {
        super.onResume()
        
        try {
            // Registrar BroadcastReceiver para cambios de configuraci√≥n
            val filter = IntentFilter("com.checklist.app.CONFIG_CHANGED")
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                // Android 13+ (API 33+) requiere especificar RECEIVER_NOT_EXPORTED
                registerReceiver(configChangeReceiver, filter, RECEIVER_NOT_EXPORTED)
            } else {
                registerReceiver(configChangeReceiver, filter)
            }
            
            // Recargar siempre para reflejar nuevos clientes/preguntas creados en otras pantallas
            loadQuestions()
            
            // Tutorial desactivado permanentemente
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "Error en onResume", e)
            Toast.makeText(this, "Error al reanudar la aplicaci√≥n: ${e.message}", Toast.LENGTH_SHORT).show()
            AppLogger.getInstance(this).logError("MainActivity", "Error en onResume: ${e.message}", e)
        }
    }
    
    override fun onPause() {
        super.onPause()
        // Desregistrar BroadcastReceiver
        try {
            unregisterReceiver(configChangeReceiver)
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "Error desregistrando BroadcastReceiver", e)
        }
    }
    
    private fun loadPredefinedQuestions() {
        try {
            // Obtener la categor√≠a "General" o crearla si no existe
            val ejecutivos = ejecutivoManager.getAllEjecutivos()
            val defaultEjecutivoId = ejecutivos.firstOrNull()?.id ?: 1L
            
            val predefinedQuestions = listOf(
                Question(
                    title = "Sistema de Vac√≠o: Es importante verificar que el sistema est√© lubricando correctamente. Si se observa que no est√° funcionando adecuadamente, es necesario identificar la causa del problema y tomar medidas para corregirlo.",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 1
                ),
                Question(
                    title = "Bombas Nivel 0: Verificar la presencia de da√±os en los sellos. Se deben realizar una inspecci√≥n visual para garantizar que cada bomba este lubricando correctamente.",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 2
                ),
                Question(
                    title = "Prueba Turbidez: Se debe realizar la prueba de Turbidez con uno de los operadores, y el jefe de planta en turno, ya que es crucial para garantizar la seguridad del sistema de desv√≠o pluvial/Aguas Industriales.",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 3
                ),
                Question(
                    title = "Nivel de Aceite: Es importante verificar que el nivel de aceite sea el correcto. Detr√°s del equipo tiene una mirilla vertical la cual debe estar marcando entre en el nivel m√°ximo o medio para trabajar correctamente.",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 4
                ),
                Question(
                    title = "Purga del sistema hidr√°ulico de Pistones: Es fundamental purgar el sistema hidr√°ulico antes de ponerlo en funcionamiento para eliminar el aire presente en el sistema.",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 5
                ),
                Question(
                    title = "Presi√≥n de Compresi√≥n: Se debe comprobar que la presi√≥n sea la correcta en los \"Pulmones del equipo\" la cual debe de estar en 0.5 bar.",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 6
                ),
                Question(
                    title = "Estado General: Realice una revisi√≥n visual para garantizar que no tengamos desgastes prematuros en fajas, no presenten sonidos extra√±os, no existan fugas en componentes neum√°ticos o en elementos del equipo.",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 7
                ),
                Question(
                    title = "Comprobar que el suministro de aire comprimido est√© funcionando correctamente y que la presi√≥n del aire est√© dentro de los par√°metros recomendados para el sistema.",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 8
                ),
                Question(
                    title = "Verificar que no existan fugas de agua, aire o vapor en equipos. Realizar una revisi√≥n general del estado de v√°lvulas (que no presentes luces intermitentes o fallas).",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 9
                ),
                Question(
                    title = "Verificar que no existan fugas de agua, aire o lecitina en el equipo.",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 10
                ),
                Question(
                    title = "Realizar una revisi√≥n general del estado de v√°lvulas y componentes que lo conforman (sensores, manetas, cableado).",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 11
                ),
                Question(
                    title = "Comprobar que los valores o par√°metros del equipo est√©n en los rangos operativos correctos. (presi√≥n de inyecci√≥n, suministro de aire, niveles de agua 2bar).",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 12
                ),
                Question(
                    title = "Verificar que no existan mangas da√±as.",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 13
                ),
                Question(
                    title = "Comprobar que no existan fugas de agua, aire o producto en el equipo.",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 14
                ),
                Question(
                    title = "Realizar una revisi√≥n general del estado de v√°lvulas y componentes que lo conforman (sensores, manetas, cableado, tapas o empaques).",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 15
                ),
                Question(
                    title = "Realice una revisi√≥n visual para garantizar que no tengamos desgastes o da√±os prematuros en fajas, acoples, mu√±oneras o mangas.",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 16
                ),
                Question(
                    title = "Comprobar que no existan fugas de aire en v√°lvulas.",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 17
                ),
                Question(
                    title = "Verificar que el soplador tenga un nivel correcto de aceite.",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 18
                ),
                Question(
                    title = "Verificar la presencia de da√±os en los sellos: Se deben realizar una inspecci√≥n visual para garantizar que cada bomba este lubricando correctamente.",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 19
                ),
                Question(
                    title = "Comprobar que no existan fugas de agua, aire o vapor en el sistema.",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 20
                ),
                Question(
                    title = "Realice una revisi√≥n visual para garantizar que no tengamos desgastes o da√±os prematuros empaques de tapas, mangueras o electrov√°lvulas.",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 21
                ),
                Question(
                    title = "Compruebe que no existan fugas de aire en mangueras o v√°lvulas.",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 22
                ),
                Question(
                    title = "Compruebe con ayuda del operador el correcto funcionamiento de las v√°lvulas de desv√≠o, cambiando el sentido de envi√≥ manualmente, luego coloque el sistema en autom√°tico cuando termine de realizar las pruebas.",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 23
                ),
                Question(
                    title = "Comprobar que no existan fugas de aire o producto.",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 24
                ),
                Question(
                    title = "Compruebe que no existan fugas de aire o vapor en los sistemas.",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 25
                ),
                Question(
                    title = "Observar el estado de los sensores inductivos, y verificar que la configuraci√≥n a la cual se va a trabajar sea la correcta. (Low-Heat) (High- Heat).",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 26
                ),
                Question(
                    title = "Verificar que el nivel de agua del tanque sea el correcto.",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 27
                ),
                Question(
                    title = "Compruebe que no existan fugas de aire en mangueras o v√°lvulas.",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 28
                ),
                Question(
                    title = "Verificar que la presi√≥n principal de entrada se encuentre como m√≠nimo 5,5 Bar.",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 29
                ),
                Question(
                    title = "Realizar una revisi√≥n general del estado de v√°lvulas y componentes que lo conforman (sensores, cableado, tapas o empaques).",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 30
                ),
                Question(
                    title = "Realice una revisi√≥n visual para garantizar que no tengamos desgastes o da√±os en empaques, mangueras, o electrov√°lvulas.",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 31
                ),
                Question(
                    title = "Compruebe que los acoples y sistemas de los sopladores se encuentran en buen estado para trabajar.",
                    subtitle = "Control Niro 40",
                    ejecutivoId = defaultEjecutivoId,
                    position = 32
                )
            )
            
            // Agregar todas las preguntas
            for (question in predefinedQuestions) {
                questionManager.addQuestion(question)
            }
            
            // Recargar la lista de preguntas
            loadQuestions()
            
            Toast.makeText(this, "31 preguntas del checklist precargadas exitosamente", Toast.LENGTH_LONG).show()
            
        } catch (e: Exception) {
            Toast.makeText(this, "Error al precargar preguntas: ${e.message}", Toast.LENGTH_LONG).show()
            e.printStackTrace()
        }
    }
    
    private fun saveAdminSession(isAdmin: Boolean, isSuperAdmin: Boolean) {
        prefs.edit()
            .putBoolean("admin_session_active", isAdmin)
            .putBoolean("super_admin_session_active", isSuperAdmin)
            .apply()
    }
    
    private fun clearAdminSession() {
        prefs.edit()
            .putBoolean("admin_session_active", false)
            .putBoolean("super_admin_session_active", false)
            .apply()
    }
    
    private fun updateAdminButtonText() {
        // Las opciones de admin ahora est√°n en el men√∫ "M√°s"
        // Tutorial eliminado: no hacer nada adicional
        
        // Mostrar/ocultar buscador seg√∫n modo administrador
        val searchLayout = binding.searchLayout
        if (isAdminMode) {
            searchLayout.visibility = android.view.View.VISIBLE
            android.util.Log.d("MainActivity", "updateAdminButtonText: Buscador visible en modo admin")
        } else {
            searchLayout.visibility = android.view.View.GONE
            // Limpiar b√∫squeda al salir del modo admin
            searchQuery = ""
            binding.searchEditText.setText("")
            android.util.Log.d("MainActivity", "updateAdminButtonText: Buscador oculto, b√∫squeda limpiada")
        }
    }
    
    private fun loadChecklistTitle() {
        val customTitle = prefs.getString("checklist_title", "Lista de Clientes")
        binding.titleText.text = customTitle
    }
    
    private fun setupFooter() {
        try {
            val packageInfo = packageManager.getPackageInfo(packageName, 0)
            val versionName = packageInfo.versionName
            binding.footerText.text = "Desarrollada por Ing.Ronald Rojas C | 8878-1108 | Ver: $versionName"
        } catch (e: Exception) {
            // Si hay error obteniendo la versi√≥n, usar versi√≥n por defecto
            binding.footerText.text = "Desarrollada por Ing.Ronald Rojas C | 8878-1108 | Ver: 1.0"
        }
    }
    
    private fun setupFloatingProgressIndicator() {
        val generateReportButton = findViewById<android.widget.Button>(R.id.generateReportButton)
        generateReportButton.setOnClickListener {
            // Generar reporte directamente (igual que el bot√≥n + de reportes)
            generateReport()
        }
    }
    
    private fun setupFloatingActionButton() {
        val fabMain = findViewById<com.google.android.material.floatingactionbutton.FloatingActionButton>(R.id.fabMain)
        val fabLimpiar = findViewById<com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton>(R.id.fabLimpiar)
        val fabAgregarCliente = findViewById<com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton>(R.id.fabAgregarCliente)
        
        var isMenuOpen = false
        
        // Bot√≥n principal - alternar men√∫
        fabMain.setOnClickListener {
            isMenuOpen = !isMenuOpen
            if (isMenuOpen) {
                // Mostrar men√∫
                fabLimpiar.visibility = android.view.View.VISIBLE
                fabAgregarCliente.visibility = android.view.View.VISIBLE
                fabMain.setImageResource(com.checklist.app.R.drawable.ic_back)
            } else {
                // Ocultar men√∫
                fabLimpiar.visibility = android.view.View.GONE
                fabAgregarCliente.visibility = android.view.View.GONE
                fabMain.setImageResource(com.checklist.app.R.drawable.ic_add)
            }
        }
        
        // Bot√≥n Limpiar
        fabLimpiar.setOnClickListener {
            clearAllClientSelections()
            // Cerrar men√∫ despu√©s de la acci√≥n
            isMenuOpen = false
            fabLimpiar.visibility = android.view.View.GONE
            fabAgregarCliente.visibility = android.view.View.GONE
            fabMain.setImageResource(com.checklist.app.R.drawable.ic_add)
        }
        
        // Bot√≥n Agregar Cliente
        fabAgregarCliente.setOnClickListener {
            showClientsActivity()
            // Cerrar men√∫ despu√©s de la acci√≥n
            isMenuOpen = false
            fabLimpiar.visibility = android.view.View.GONE
            fabAgregarCliente.visibility = android.view.View.GONE
            fabMain.setImageResource(com.checklist.app.R.drawable.ic_add)
        }
    }
    
    private fun clearAllClientSelections() {
        try {
            val allQuestions = questionManager.getAllQuestions()
            var clearedCount = 0
            
            for (question in allQuestions) {
                if (question.isCompleted) {
                    val updatedQuestion = question.copy(isCompleted = false)
                    questionManager.updateQuestion(updatedQuestion)
                    clearedCount++
                }
            }
            
            // Recargar la lista para mostrar los cambios
            loadQuestions()
            
            if (clearedCount > 0) {
                Toast.makeText(this, "Se limpiaron $clearedCount clientes", Toast.LENGTH_SHORT).show()
            } else {
                Toast.makeText(this, "No hay clientes marcados para limpiar", Toast.LENGTH_SHORT).show()
            }
            
        } catch (e: Exception) {
            Toast.makeText(this, "Error al limpiar selecciones: ${e.message}", Toast.LENGTH_LONG).show()
            e.printStackTrace()
        }
    }
    
    // Tutorial eliminado
    
    private fun loadEssentialData() {
        // Cargar solo datos cr√≠ticos para mostrar la UI r√°pidamente
        try {
            val t0 = System.currentTimeMillis()
            loadChecklistTitle()
            checkFirstTimeSetup()
            initializeDefaultEjecutivos()
            
            // Cargar preguntas existentes (sin procesar clientes)
            val questions = questionManager.getQuestionsOrderedByPosition()
            allQuestions = questions
            
            // Actualizar UI inmediatamente
            runOnUiThread {
                updateQuestionsUI(questions)
                setupEjecutivoButtons()
            }
            val elapsed = System.currentTimeMillis() - t0
            android.util.Log.d("Perf", "loadEssentialData: ${elapsed}ms (questions=${questions.size})")
            
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "Error cargando datos esenciales", e)
        }
    }
    
    private suspend fun loadNonEssentialData() {
        // Cargar datos no cr√≠ticos en background
        try {
            // Precargar clientes (operaci√≥n costosa) solo si a√∫n no hay clientes cargados
            val existingClientes = clienteManager.getAllClientes()
            if (existingClientes.isEmpty()) {
                precargarClientes()
            }
            
            // Corregir estados iniciales
            correctInitialClientStates()
            
            // NO verificar tutorial aqu√≠ para evitar conflictos
            // El tutorial se verifica solo en onResume()
            
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "Error cargando datos no esenciales", e)
        }
    }
    
    private fun correctInitialClientStates() {
        try {
            // Solo corregir una vez, no cada vez que se inicia la app
            val alreadyCorrected = prefs.getBoolean("initial_states_corrected", false)
            if (alreadyCorrected) return
            
            val isInitialStatePendiente = prefs.getBoolean("client_initial_state_pendiente", true)
            val expectedCompletedState = !isInitialStatePendiente
            
            // Determinar el estado correcto para la tabla de estados
            val estadoCorrecto = if (isInitialStatePendiente) {
                ClienteEstadoManager.ESTADO_PENDIENTE
            } else {
                ClienteEstadoManager.ESTADO_PAGADO
            }
            
            val allQuestions = questionManager.getAllQuestions()
            var correctedCount = 0
            
            for (question in allQuestions) {
                val clienteId = question.clienteId ?: 0L
                val ejecutivoId = question.ejecutivoId
                
                // Actualizar tabla de estados
                clienteEstadoManager.updateEstadoCliente(clienteId, estadoCorrecto, ejecutivoId)
                
                // Actualizar pregunta para mantener compatibilidad
                if (question.isCompleted != expectedCompletedState) {
                    val correctedQuestion = question.copy(isCompleted = expectedCompletedState)
                    questionManager.updateQuestion(correctedQuestion)
                    correctedCount++
                }
            }
            
            if (correctedCount > 0) {
                android.util.Log.d("MainActivity", "correctInitialClientStates: $correctedCount clientes corregidos al estado inicial correcto: $estadoCorrecto")
                // Marcar como corregido para no volver a hacerlo
                prefs.edit().putBoolean("initial_states_corrected", true).apply()
                // Recargar la UI para mostrar los cambios
                runOnUiThread {
                    loadQuestions()
                }
            } else {
                // Si no hubo correcciones, marcar como corregido de todas formas
                prefs.edit().putBoolean("initial_states_corrected", true).apply()
            }
            
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "Error corrigiendo estados iniciales de clientes", e)
        }
    }
    
    // M√©todo p√∫blico para actualizar UI desde ConfigActivity
    fun refreshUIAfterConfigChange() {
        android.util.Log.d("MainActivity", "refreshUIAfterConfigChange: Actualizando UI despu√©s de cambio de configuraci√≥n")
        lifecycleScope.launch {
            try {
                // Recargar preguntas con los nuevos estados
                val questions = questionManager.getQuestionsOrderedByPosition()
                allQuestions = questions
                
                // Log detallado para verificar la actualizaci√≥n
                android.util.Log.d("MainActivity", "refreshUIAfterConfigChange: ${questions.size} preguntas recargadas")
                questions.forEach { question ->
                    val clienteId = question.clienteId ?: 0L
                    val estado = clienteEstadoManager.getEstadoString(clienteId)
                    android.util.Log.d("MainActivity", "refreshUIAfterConfigChange: ${question.title} - isCompleted: ${question.isCompleted}, Estado: $estado")
                }
                
                // Actualizar UI en el hilo principal
                runOnUiThread {
                    updateQuestionsUI(questions)
                    updateProgressIndicator(questions)
                    android.util.Log.d("MainActivity", "refreshUIAfterConfigChange: UI actualizada con ${questions.size} preguntas")
                }
            } catch (e: Exception) {
                android.util.Log.e("MainActivity", "Error actualizando UI despu√©s de cambio de configuraci√≥n", e)
            }
        }
    }
    
    
}


